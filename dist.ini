name             = DB-Skip
author           = Christian Walde <walde.christian@googlemail.com>
license          = WTFPL_2
copyright_holder = Christian Walde
copyright_year   = 2011

; version provider
[AutoVersion]       ; builds a version automatically from the date

; choose files to include
[GatherDir]         ; everything under top dir
[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[PodWeaver]         ; generate Pod
config_plugin = @DAGOLDEN ; my own plugin allows Pod::WikiDoc

; generated files
[License]                   ; boilerplate license
[ReadmeMarkdownFromPod]     ; from Pod (runs after PodWeaver)
[CopyReadmeFromBuild]       ; for the repo

; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case

; xt tests
[MetaTests]         ; xt/release/meta-yaml.t
[PodSyntaxTests]    ; xt/release/pod-syntax.t
[PodCoverageTests]  ; xt/release/pod-coverage.t
[Test::Portability] ; xt/release/portability.t (of file name)
[Test::Kwalitee]    ; xt/release/kwalitee.t
[Test::Version]     ; xt/release/test-version.t

; metadata
[AutoPrereqs]       ; find prereqs from code
[MinimumPerl]       ; determine minimum perl version
[GithubMeta]

[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = corpus
package = DB        ; just in case

[Bugtracker]        ; defaults to RT

[MetaProvides::Package] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives

[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)

; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; before release
[Git::Check]        ; ensure all files checked in
allow_dirty = Changes
allow_dirty = dist.ini
allow_dirty = README.mkdn

[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading

; releaser
[UploadToCPAN]      ; uploads to CPAN

; after release
[NextRelease]

[Git::Commit]
allow_dirty = Changes
allow_dirty = dist.ini
allow_dirty = README.mkdn

[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v

[Git::Push]         ; push repo to remote
push_to = origin
